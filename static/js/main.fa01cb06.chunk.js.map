{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPanding","filteredRobots","filter","robot","toLowerCase","includes","username","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","isPending","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.fa01cb06.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id}) => {\r\n  \r\n\r\n    return (\r\n        <div className=\"tc bg-white dib br3 pa3 ma3 grow bw2 shadow-5\">\r\n            <img alt ='robots' src = {`https://robohash.org/${id}${name}ildar?200x200`}></img> \r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\nreturn(\r\n  <div>\r\n  {\r\n    robots.map((user,i) => {\r\n        return (\r\n        <Card \r\n        key = {i} \r\n        id = {robots[i].id}\r\n         name = {robots[i].name}\r\n          email = {robots[i].email}/>\r\n          )\r\n    })\r\n    }\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return( \r\n        <div className = \"pa2\">\r\n        <input \r\n        className = \"pa3 ba b--white bg-white bw2 shadow-5 ma3 tc bg-white br3 pa3\"\r\n        type = \"search\" \r\n        placeholder = \"search for Robot\"\r\n        onChange = {searchChange}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{overflowY:'scroll', border: '5px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, { Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n    this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if ( this.state.hasError) {\r\n            return  <h1>This is the error</h1>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\n// import {robots} from '../components/robots'\r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport {setSearchField, requestRobots} from '../actions'\r\n// import { render } from 'react-dom';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPanding: state.requestRobots.isPanding,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return {\r\n       onSearchChange: (event) =>\r\n        dispatch(setSearchField(event.target.value)),\r\n       onRequestRobots: () => dispatch(requestRobots())\r\n   }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n    render() {\r\n        // const {robots} = this.state;\r\n        const {searchField,onSearchChange, robots, isPanding} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return (robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n                || robot.email.toLowerCase().includes(searchField.toLowerCase()) ||\r\n                robot.username.toLowerCase().includes(searchField.toLowerCase()))\r\n        })\r\n        return isPanding ? \r\n        <h1>Loading</h1>:\r\n        (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1 ttu\">Robo-friends</h1>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n        )\r\n        \r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n    CHANGE_SEARCH_FIELD\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n    CHANGE_SEARCH_FIELD\r\n} from './constants.js'\r\n\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD: \r\n        return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending : false});  \r\n        case REQUEST_ROBOTS_FAILED:    \r\n            return Object.assign({}, state, {error: action.payload, isPending: false});    \r\n        default: \r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport {createLogger} from 'redux-logger';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n// const thunkMiddleware = \nconst store =\n createStore(rootReducer, applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n<Provider store={store}>\n  <App/>\n</Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}